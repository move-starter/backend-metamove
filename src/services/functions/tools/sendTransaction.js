import axios from 'axios';

export const sendTransactionTool = {
  definition: {
    type: 'function',
    function: {
      name: 'send_transaction',
      description: 'Send native token from one address to another on a specified network',
      parameters: {
        type: 'object',
        properties: {
          to: {
            type: 'string',
            description: 'The wallet address to send to'
          },
          amount: {
            type: 'string',
            description: 'The amount of native token to send'
          },
          chain: {
            type: 'string',
            description: 'The chain to send the transaction on'
          }
        },
        required: ['to', 'amount', 'chain']
      }
    }
  },
  handler: async ({ to, amount, chain }) => {
    console.log('sendTransaction handler called with to:', to, 'amount:', amount, 'chain:', chain);
    
    try {
      // Check if MetaMask is installed
      if (typeof window.ethereum === 'undefined') {
        throw new Error('MetaMask is not installed. Please install it to use this feature.');
      }

      // Request account access if needed
      await window.ethereum.request({ method: 'eth_requestAccounts' });

      // Get the list of accounts
      const accounts = await window.ethereum.request({ method: 'eth_accounts' });
      const from = accounts[0]; // Use the first account as the "from" address

      // Create calldata using Enso API
      const response = await axios.post(`${process.env.ENSO_API_URL}/createCalldata`, {
        from,
        to,
        amount,
        chain
      });

      const { calldata } = response.data; // Assuming the API returns the calldata

      // Create a transaction object
      const transactionParameters = {
        to: to, // The address to send to
        from: from, // The address to send from
        data: calldata, // The calldata generated by Enso API
        chainId: chain // Specify the chain ID (you may need to map chain names to IDs)
      };

      // Send the transaction
      const txHash = await window.ethereum.request({
        method: 'eth_sendTransaction',
        params: [transactionParameters],
      });

      console.log('Transaction sent with hash:', txHash);
      return { success: true, txHash };
    } catch (error) {
      console.error('Error in sendTransaction handler:', error);
      throw new Error(`Failed to send transaction: ${error.message}`);
    }
  }
};